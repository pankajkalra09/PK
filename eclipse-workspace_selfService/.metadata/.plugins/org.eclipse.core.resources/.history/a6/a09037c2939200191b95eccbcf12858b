package com.unifyed.erp.dbfextractor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Arrays;
import java.util.Date;

import com.linuxense.javadbf.DBFDataType;
import com.linuxense.javadbf.DBFException;
import com.linuxense.javadbf.DBFField;
import com.linuxense.javadbf.DBFReader;
import com.linuxense.javadbf.DBFRow;
import com.linuxense.javadbf.DBFUtils;
import com.opencsv.CSVWriter;

public class Application {
	public static void main(String[] args) {
		DBFReader reader = null;
		Writer writer = null;
		try {
		/*	if(args.length!=2) {
				System.out.printf("Arguments are %s",Arrays.deepToString(args));
				System.err.println("Invalid arguments length");
				System.exit(1);
			}*/
			/*String inputFileName = args[0];
			String outputFileName = args[1];*/
			
			String inputFileName = "C:\\Users\\Pankaj_Kalra\\Desktop\\Goldmine\\Detail.dbf";
			String outputFileName = "C:\\Users\\Pankaj_Kalra\\Desktop\\Goldmine\\okwu_detail.csv";
			File f = new File(inputFileName);
			reader = new DBFReader(new FileInputStream(f));

			// get the field count if you want for some reasons like the following

			int numberOfFields = reader.getFieldCount();

			// use this count to fetch all field information
			// if required

			System.out.println("Totoal no of fields in headers {} " + numberOfFields);
			File fout = new File(outputFileName);
			writer = new FileWriter(fout, true);
            CSVWriter csvwriter = new CSVWriter(writer);
            DBFDataType[] dataTypeArray = new DBFDataType[numberOfFields];

            String[] headers = new String[numberOfFields];
            for (int i = 0; i < numberOfFields; i++) {

                DBFField field = reader.getField(i);

                // do something with it if you want
                // refer the JavaDoc API reference for more details
                //
                dataTypeArray[i] = field.getType();
                headers[i] = field.getName();
            }
            csvwriter.writeNext(headers);

            System.out.println("Arrays type " + Arrays.deepToString(dataTypeArray));
            // Now, lets us start reading the rows

            DBFRow row = null;
            int cnt = 0;
            
            while ((row = reader.nextRow()) != null) {
                String[] rowstr = new String[numberOfFields];

                for (int i = 0; i < numberOfFields; i++) {
                    DBFDataType dataType = dataTypeArray[i];
                    if (dataType.compareTo(DBFDataType.CHARACTER) == 0
                            || dataType.compareTo(DBFDataType.VARCHAR) == 0) {
                        rowstr[i] = row.getString(i);
                    } else if (dataType.compareTo(DBFDataType.DATE) == 0) {
                        Date dt = row.getDate(i);
                        if (null != dt)
                            rowstr[i] = String.valueOf(dt.getTime());
                    } else {
                        rowstr[i] = row.getString(i);
                    }
                }

                csvwriter.writeNext(rowstr);
                if (++cnt % 1000 == 0) {
                    System.out.println("Read records ==> from  " + cnt);
                    csvwriter.flush();
                }

            }
			csvwriter.flush();
			System.out.println("Reading  finished total records read  " + cnt);

			// By now, we have iterated through all of the rows

		} catch (DBFException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				writer.flush();
				writer.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			DBFUtils.close(reader);
		}
	}
}
